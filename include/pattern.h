#ifndef MOOD_LIGHT_PATTERN_H
#define MOOD_LIGHT_PATTERN_H

#include <cstdint>
#include <cstddef>

typedef enum {
    PATTERN_TYPE_UNIFORM,
    PATTERN_TYPE_CIRCULAR
} PatternType;

class Pattern
{
public:
    Pattern(int8_t id, uint32_t sleep, float intensity, void *data) :
            id_(id), sleep_(sleep), intensity_(intensity)
    {};

    virtual ~Pattern() = default;

    /**
     * Process the RGBW values which will be assigned right after this call.
     * This function is assumed to be called for each LED every `sleep`
     * millisecond.
     *
     * @param r Red composite
     * @param g Green composite
     * @param b Blue composite
     * @param w White composite
     */
    virtual void process(uint8_t *r, uint8_t *g, uint8_t *b, uint8_t *w) = 0;

    virtual bool updateData(void *data, size_t dataLength) = 0;

    int8_t getId() const
    {
        return id_;
    };

    uint32_t getSleep() const
    {
        return sleep_;
    }

    void setSleep(uint32_t sleep)
    {
        sleep_ = sleep;
    }

    float getIntensity() const
    {
        return intensity_;
    }

    void setIntensity(float intensity)
    {
        intensity_ = intensity;
    }

protected:
    // Numerical ID of the pattern
    int8_t id_;

    // Sleep time used to create the pattern effect, in milliseconds.
    uint32_t sleep_;

    // Intensity of the light generated by the pattern, between 0 and 1.
    float intensity_;

    // Number of LED in the matrix
    uint8_t numLed_ = 35;
};

#endif /* !MOOD_LIGHT_PATTERN_H */
